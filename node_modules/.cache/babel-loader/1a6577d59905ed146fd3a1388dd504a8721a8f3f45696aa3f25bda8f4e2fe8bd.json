{"ast":null,"code":"import _classCallCheck from \"C:/Users/oyeti/Documents/GitHub/HNG_Stage-Three/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/oyeti/Documents/GitHub/HNG_Stage-Three/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"C:/Users/oyeti/Documents/GitHub/HNG_Stage-Three/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { asap } from '@react-dnd/asap';\nimport { invariant } from '@react-dnd/invariant';\nimport { addSource as _addSource, addTarget as _addTarget, removeSource as _removeSource, removeTarget as _removeTarget } from '../actions/registry.js';\nimport { validateSourceContract, validateTargetContract, validateType } from '../contracts.js';\nimport { HandlerRole } from '../interfaces.js';\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js';\nfunction getNextHandlerId(role) {\n  var id = getNextUniqueId().toString();\n  switch (role) {\n    case HandlerRole.SOURCE:\n      return \"S\".concat(id);\n    case HandlerRole.TARGET:\n      return \"T\".concat(id);\n    default:\n      throw new Error(\"Unknown Handler Role: \".concat(role));\n  }\n}\nfunction parseRoleFromHandlerId(handlerId) {\n  switch (handlerId[0]) {\n    case 'S':\n      return HandlerRole.SOURCE;\n    case 'T':\n      return HandlerRole.TARGET;\n    default:\n      throw new Error(\"Cannot parse handler ID: \".concat(handlerId));\n  }\n}\nfunction mapContainsValue(map, searchValue) {\n  var entries = map.entries();\n  var isDone = false;\n  do {\n    var _entries$next = entries.next(),\n      done = _entries$next.done,\n      _entries$next$value = _slicedToArray(_entries$next.value, 2),\n      value = _entries$next$value[1];\n    if (value === searchValue) {\n      return true;\n    }\n    isDone = !!done;\n  } while (!isDone);\n  return false;\n}\nexport var HandlerRegistryImpl = /*#__PURE__*/function () {\n  function HandlerRegistryImpl(store) {\n    _classCallCheck(this, HandlerRegistryImpl);\n    this.types = new Map();\n    this.dragSources = new Map();\n    this.dropTargets = new Map();\n    this.pinnedSourceId = null;\n    this.pinnedSource = null;\n    this.store = store;\n  }\n  _createClass(HandlerRegistryImpl, [{\n    key: \"addSource\",\n    value: function addSource(type, source) {\n      validateType(type);\n      validateSourceContract(source);\n      var sourceId = this.addHandler(HandlerRole.SOURCE, type, source);\n      this.store.dispatch(_addSource(sourceId));\n      return sourceId;\n    }\n  }, {\n    key: \"addTarget\",\n    value: function addTarget(type, target) {\n      validateType(type, true);\n      validateTargetContract(target);\n      var targetId = this.addHandler(HandlerRole.TARGET, type, target);\n      this.store.dispatch(_addTarget(targetId));\n      return targetId;\n    }\n  }, {\n    key: \"containsHandler\",\n    value: function containsHandler(handler) {\n      return mapContainsValue(this.dragSources, handler) || mapContainsValue(this.dropTargets, handler);\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource(sourceId) {\n      var includePinned = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      var isPinned = includePinned && sourceId === this.pinnedSourceId;\n      var source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId);\n      return source;\n    }\n  }, {\n    key: \"getTarget\",\n    value: function getTarget(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.dropTargets.get(targetId);\n    }\n  }, {\n    key: \"getSourceType\",\n    value: function getSourceType(sourceId) {\n      invariant(this.isSourceId(sourceId), 'Expected a valid source ID.');\n      return this.types.get(sourceId);\n    }\n  }, {\n    key: \"getTargetType\",\n    value: function getTargetType(targetId) {\n      invariant(this.isTargetId(targetId), 'Expected a valid target ID.');\n      return this.types.get(targetId);\n    }\n  }, {\n    key: \"isSourceId\",\n    value: function isSourceId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.SOURCE;\n    }\n  }, {\n    key: \"isTargetId\",\n    value: function isTargetId(handlerId) {\n      var role = parseRoleFromHandlerId(handlerId);\n      return role === HandlerRole.TARGET;\n    }\n  }, {\n    key: \"removeSource\",\n    value: function removeSource(sourceId) {\n      var _this = this;\n      invariant(this.getSource(sourceId), 'Expected an existing source.');\n      this.store.dispatch(_removeSource(sourceId));\n      asap(function () {\n        _this.dragSources.delete(sourceId);\n        _this.types.delete(sourceId);\n      });\n    }\n  }, {\n    key: \"removeTarget\",\n    value: function removeTarget(targetId) {\n      invariant(this.getTarget(targetId), 'Expected an existing target.');\n      this.store.dispatch(_removeTarget(targetId));\n      this.dropTargets.delete(targetId);\n      this.types.delete(targetId);\n    }\n  }, {\n    key: \"pinSource\",\n    value: function pinSource(sourceId) {\n      var source = this.getSource(sourceId);\n      invariant(source, 'Expected an existing source.');\n      this.pinnedSourceId = sourceId;\n      this.pinnedSource = source;\n    }\n  }, {\n    key: \"unpinSource\",\n    value: function unpinSource() {\n      invariant(this.pinnedSource, 'No source is pinned at the time.');\n      this.pinnedSourceId = null;\n      this.pinnedSource = null;\n    }\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(role, type, handler) {\n      var id = getNextHandlerId(role);\n      this.types.set(id, type);\n      if (role === HandlerRole.SOURCE) {\n        this.dragSources.set(id, handler);\n      } else if (role === HandlerRole.TARGET) {\n        this.dropTargets.set(id, handler);\n      }\n      return id;\n    }\n  }]);\n  return HandlerRegistryImpl;\n}();","map":{"version":3,"names":["asap","invariant","addSource","addTarget","removeSource","removeTarget","validateSourceContract","validateTargetContract","validateType","HandlerRole","getNextUniqueId","getNextHandlerId","role","id","toString","SOURCE","concat","TARGET","Error","parseRoleFromHandlerId","handlerId","mapContainsValue","map","searchValue","entries","isDone","_entries$next","next","done","_entries$next$value","_slicedToArray","value","HandlerRegistryImpl","store","_classCallCheck","types","Map","dragSources","dropTargets","pinnedSourceId","pinnedSource","_createClass","key","type","source","sourceId","addHandler","dispatch","target","targetId","containsHandler","handler","getSource","includePinned","arguments","length","undefined","isSourceId","isPinned","get","getTarget","isTargetId","getSourceType","getTargetType","_this","delete","pinSource","unpinSource","set"],"sources":["C:\\Users\\oyeti\\Documents\\GitHub\\HNG_Stage-Three\\node_modules\\dnd-core\\src\\classes\\HandlerRegistryImpl.ts"],"sourcesContent":["import { asap } from '@react-dnd/asap'\nimport { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport {\n\taddSource,\n\taddTarget,\n\tremoveSource,\n\tremoveTarget,\n} from '../actions/registry.js'\nimport {\n\tvalidateSourceContract,\n\tvalidateTargetContract,\n\tvalidateType,\n} from '../contracts.js'\nimport type {\n\tDragSource,\n\tDropTarget,\n\tHandlerRegistry,\n\tIdentifier,\n\tSourceType,\n\tTargetType,\n} from '../interfaces.js'\nimport { HandlerRole } from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport { getNextUniqueId } from '../utils/getNextUniqueId.js'\n\nfunction getNextHandlerId(role: HandlerRole): string {\n\tconst id = getNextUniqueId().toString()\n\tswitch (role) {\n\t\tcase HandlerRole.SOURCE:\n\t\t\treturn `S${id}`\n\t\tcase HandlerRole.TARGET:\n\t\t\treturn `T${id}`\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown Handler Role: ${role}`)\n\t}\n}\n\nfunction parseRoleFromHandlerId(handlerId: string) {\n\tswitch (handlerId[0]) {\n\t\tcase 'S':\n\t\t\treturn HandlerRole.SOURCE\n\t\tcase 'T':\n\t\t\treturn HandlerRole.TARGET\n\t\tdefault:\n\t\t\tthrow new Error(`Cannot parse handler ID: ${handlerId}`)\n\t}\n}\n\nfunction mapContainsValue<T>(map: Map<string, T>, searchValue: T) {\n\tconst entries = map.entries()\n\tlet isDone = false\n\tdo {\n\t\tconst {\n\t\t\tdone,\n\t\t\tvalue: [, value],\n\t\t} = entries.next()\n\t\tif (value === searchValue) {\n\t\t\treturn true\n\t\t}\n\t\tisDone = !!done\n\t} while (!isDone)\n\treturn false\n}\n\nexport class HandlerRegistryImpl implements HandlerRegistry {\n\tprivate types: Map<string, SourceType | TargetType> = new Map()\n\tprivate dragSources: Map<string, DragSource> = new Map()\n\tprivate dropTargets: Map<string, DropTarget> = new Map()\n\tprivate pinnedSourceId: string | null = null\n\tprivate pinnedSource: any = null\n\tprivate store: Store<State>\n\n\tpublic constructor(store: Store<State>) {\n\t\tthis.store = store\n\t}\n\n\tpublic addSource(type: SourceType, source: DragSource): string {\n\t\tvalidateType(type)\n\t\tvalidateSourceContract(source)\n\n\t\tconst sourceId = this.addHandler(HandlerRole.SOURCE, type, source)\n\t\tthis.store.dispatch(addSource(sourceId))\n\t\treturn sourceId\n\t}\n\n\tpublic addTarget(type: TargetType, target: DropTarget): string {\n\t\tvalidateType(type, true)\n\t\tvalidateTargetContract(target)\n\n\t\tconst targetId = this.addHandler(HandlerRole.TARGET, type, target)\n\t\tthis.store.dispatch(addTarget(targetId))\n\t\treturn targetId\n\t}\n\n\tpublic containsHandler(handler: DragSource | DropTarget): boolean {\n\t\treturn (\n\t\t\tmapContainsValue(this.dragSources, handler) ||\n\t\t\tmapContainsValue(this.dropTargets, handler)\n\t\t)\n\t}\n\n\tpublic getSource(sourceId: string, includePinned = false): DragSource {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\tconst isPinned = includePinned && sourceId === this.pinnedSourceId\n\t\tconst source = isPinned ? this.pinnedSource : this.dragSources.get(sourceId)\n\t\treturn source\n\t}\n\n\tpublic getTarget(targetId: string): DropTarget {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.dropTargets.get(targetId) as DropTarget\n\t}\n\n\tpublic getSourceType(sourceId: string): Identifier {\n\t\tinvariant(this.isSourceId(sourceId), 'Expected a valid source ID.')\n\t\treturn this.types.get(sourceId) as Identifier\n\t}\n\n\tpublic getTargetType(targetId: string): Identifier | Identifier[] {\n\t\tinvariant(this.isTargetId(targetId), 'Expected a valid target ID.')\n\t\treturn this.types.get(targetId) as Identifier | Identifier[]\n\t}\n\n\tpublic isSourceId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.SOURCE\n\t}\n\n\tpublic isTargetId(handlerId: string): boolean {\n\t\tconst role = parseRoleFromHandlerId(handlerId)\n\t\treturn role === HandlerRole.TARGET\n\t}\n\n\tpublic removeSource(sourceId: string): void {\n\t\tinvariant(this.getSource(sourceId), 'Expected an existing source.')\n\t\tthis.store.dispatch(removeSource(sourceId))\n\t\tasap(() => {\n\t\t\tthis.dragSources.delete(sourceId)\n\t\t\tthis.types.delete(sourceId)\n\t\t})\n\t}\n\n\tpublic removeTarget(targetId: string): void {\n\t\tinvariant(this.getTarget(targetId), 'Expected an existing target.')\n\t\tthis.store.dispatch(removeTarget(targetId))\n\t\tthis.dropTargets.delete(targetId)\n\t\tthis.types.delete(targetId)\n\t}\n\n\tpublic pinSource(sourceId: string): void {\n\t\tconst source = this.getSource(sourceId)\n\t\tinvariant(source, 'Expected an existing source.')\n\n\t\tthis.pinnedSourceId = sourceId\n\t\tthis.pinnedSource = source\n\t}\n\n\tpublic unpinSource(): void {\n\t\tinvariant(this.pinnedSource, 'No source is pinned at the time.')\n\n\t\tthis.pinnedSourceId = null\n\t\tthis.pinnedSource = null\n\t}\n\n\tprivate addHandler(\n\t\trole: HandlerRole,\n\t\ttype: SourceType | TargetType,\n\t\thandler: DragSource | DropTarget,\n\t): string {\n\t\tconst id = getNextHandlerId(role)\n\t\tthis.types.set(id, type)\n\t\tif (role === HandlerRole.SOURCE) {\n\t\t\tthis.dragSources.set(id, handler as DragSource)\n\t\t} else if (role === HandlerRole.TARGET) {\n\t\t\tthis.dropTargets.set(id, handler as DropTarget)\n\t\t}\n\t\treturn id\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}