{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { ListenerType } from './interfaces.js';\nimport { OptionsReader } from './OptionsReader.js';\nimport { distance, inAngleRanges } from './utils/math.js';\nimport { getEventClientOffset, getNodeClientOffset } from './utils/offsets.js';\nimport { eventShouldEndDrag, eventShouldStartDrag, isTouchEvent } from './utils/predicates.js';\nimport { supportsPassive } from './utils/supportsPassive.js';\nconst eventNames = {\n  [ListenerType.mouse]: {\n    start: 'mousedown',\n    move: 'mousemove',\n    end: 'mouseup',\n    contextmenu: 'contextmenu'\n  },\n  [ListenerType.touch]: {\n    start: 'touchstart',\n    move: 'touchmove',\n    end: 'touchend'\n  },\n  [ListenerType.keyboard]: {\n    keydown: 'keydown'\n  }\n};\nexport class TouchBackendImpl {\n  /**\n  * Generate profiling statistics for the HTML5Backend.\n  */\n  profile() {\n    var ref;\n    return {\n      sourceNodes: this.sourceNodes.size,\n      sourcePreviewNodes: this.sourcePreviewNodes.size,\n      sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n      targetNodes: this.targetNodes.size,\n      dragOverTargetIds: ((ref = this.dragOverTargetIds) === null || ref === void 0 ? void 0 : ref.length) || 0\n    };\n  }\n  // public for test\n  get document() {\n    return this.options.document;\n  }\n  setup() {\n    const root = this.options.rootElement;\n    if (!root) {\n      return;\n    }\n    invariant(!TouchBackendImpl.isSetUp, 'Cannot have two Touch backends at the same time.');\n    TouchBackendImpl.isSetUp = true;\n    this.addEventListener(root, 'start', this.getTopMoveStartHandler());\n    this.addEventListener(root, 'start', this.handleTopMoveStartCapture, true);\n    this.addEventListener(root, 'move', this.handleTopMove);\n    this.addEventListener(root, 'move', this.handleTopMoveCapture, true);\n    this.addEventListener(root, 'end', this.handleTopMoveEndCapture, true);\n    if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n      this.addEventListener(root, 'contextmenu', this.handleTopMoveEndCapture);\n    }\n    if (this.options.enableKeyboardEvents) {\n      this.addEventListener(root, 'keydown', this.handleCancelOnEscape, true);\n    }\n  }\n  teardown() {\n    const root = this.options.rootElement;\n    if (!root) {\n      return;\n    }\n    TouchBackendImpl.isSetUp = false;\n    this._mouseClientOffset = {};\n    this.removeEventListener(root, 'start', this.handleTopMoveStartCapture, true);\n    this.removeEventListener(root, 'start', this.handleTopMoveStart);\n    this.removeEventListener(root, 'move', this.handleTopMoveCapture, true);\n    this.removeEventListener(root, 'move', this.handleTopMove);\n    this.removeEventListener(root, 'end', this.handleTopMoveEndCapture, true);\n    if (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n      this.removeEventListener(root, 'contextmenu', this.handleTopMoveEndCapture);\n    }\n    if (this.options.enableKeyboardEvents) {\n      this.removeEventListener(root, 'keydown', this.handleCancelOnEscape, true);\n    }\n    this.uninstallSourceNodeRemovalObserver();\n  }\n  addEventListener(subject, event, handler, capture = false) {\n    const options = supportsPassive ? {\n      capture,\n      passive: false\n    } : capture;\n    this.listenerTypes.forEach(function (listenerType) {\n      const evt = eventNames[listenerType][event];\n      if (evt) {\n        subject.addEventListener(evt, handler, options);\n      }\n    });\n  }\n  removeEventListener(subject, event, handler, capture = false) {\n    const options = supportsPassive ? {\n      capture,\n      passive: false\n    } : capture;\n    this.listenerTypes.forEach(function (listenerType) {\n      const evt = eventNames[listenerType][event];\n      if (evt) {\n        subject.removeEventListener(evt, handler, options);\n      }\n    });\n  }\n  connectDragSource(sourceId, node) {\n    const handleMoveStart = this.handleMoveStart.bind(this, sourceId);\n    this.sourceNodes.set(sourceId, node);\n    this.addEventListener(node, 'start', handleMoveStart);\n    return () => {\n      this.sourceNodes.delete(sourceId);\n      this.removeEventListener(node, 'start', handleMoveStart);\n    };\n  }\n  connectDragPreview(sourceId, node, options) {\n    this.sourcePreviewNodeOptions.set(sourceId, options);\n    this.sourcePreviewNodes.set(sourceId, node);\n    return () => {\n      this.sourcePreviewNodes.delete(sourceId);\n      this.sourcePreviewNodeOptions.delete(sourceId);\n    };\n  }\n  connectDropTarget(targetId, node) {\n    const root = this.options.rootElement;\n    if (!this.document || !root) {\n      return () => {\n        /* noop */};\n    }\n    const handleMove = e => {\n      if (!this.document || !root || !this.monitor.isDragging()) {\n        return;\n      }\n      let coords;\n      /**\n      * Grab the coordinates for the current mouse/touch position\n      */\n      switch (e.type) {\n        case eventNames.mouse.move:\n          coords = {\n            x: e.clientX,\n            y: e.clientY\n          };\n          break;\n        case eventNames.touch.move:\n          var ref, ref1;\n          coords = {\n            x: ((ref = e.touches[0]) === null || ref === void 0 ? void 0 : ref.clientX) || 0,\n            y: ((ref1 = e.touches[0]) === null || ref1 === void 0 ? void 0 : ref1.clientY) || 0\n          };\n          break;\n      }\n      /**\n      * Use the coordinates to grab the element the drag ended on.\n      * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.\n      */\n      const droppedOn = coords != null ? this.document.elementFromPoint(coords.x, coords.y) : undefined;\n      const childMatch = droppedOn && node.contains(droppedOn);\n      if (droppedOn === node || childMatch) {\n        return this.handleMove(e, targetId);\n      }\n    };\n    /**\n    * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.\n    */\n    this.addEventListener(this.document.body, 'move', handleMove);\n    this.targetNodes.set(targetId, node);\n    return () => {\n      if (this.document) {\n        this.targetNodes.delete(targetId);\n        this.removeEventListener(this.document.body, 'move', handleMove);\n      }\n    };\n  }\n  getTopMoveStartHandler() {\n    if (!this.options.delayTouchStart && !this.options.delayMouseStart) {\n      return this.handleTopMoveStart;\n    }\n    return this.handleTopMoveStartDelay;\n  }\n  installSourceNodeRemovalObserver(node) {\n    this.uninstallSourceNodeRemovalObserver();\n    this.draggedSourceNode = node;\n    this.draggedSourceNodeRemovalObserver = new MutationObserver(() => {\n      if (node && !node.parentElement) {\n        this.resurrectSourceNode();\n        this.uninstallSourceNodeRemovalObserver();\n      }\n    });\n    if (!node || !node.parentElement) {\n      return;\n    }\n    this.draggedSourceNodeRemovalObserver.observe(node.parentElement, {\n      childList: true\n    });\n  }\n  resurrectSourceNode() {\n    if (this.document && this.draggedSourceNode) {\n      this.draggedSourceNode.style.display = 'none';\n      this.draggedSourceNode.removeAttribute('data-reactid');\n      this.document.body.appendChild(this.draggedSourceNode);\n    }\n  }\n  uninstallSourceNodeRemovalObserver() {\n    if (this.draggedSourceNodeRemovalObserver) {\n      this.draggedSourceNodeRemovalObserver.disconnect();\n    }\n    this.draggedSourceNodeRemovalObserver = undefined;\n    this.draggedSourceNode = undefined;\n  }\n  constructor(manager, context, options) {\n    this.getSourceClientOffset = sourceId => {\n      const element = this.sourceNodes.get(sourceId);\n      return element && getNodeClientOffset(element);\n    };\n    this.handleTopMoveStartCapture = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n      this.moveStartSourceIds = [];\n    };\n    this.handleMoveStart = sourceId => {\n      // Just because we received an event doesn't necessarily mean we need to collect drag sources.\n      // We only collect start collecting drag sources on touch and left mouse events.\n      if (Array.isArray(this.moveStartSourceIds)) {\n        this.moveStartSourceIds.unshift(sourceId);\n      }\n    };\n    this.handleTopMoveStart = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n      // Don't prematurely preventDefault() here since it might:\n      // 1. Mess up scrolling\n      // 2. Mess up long tap (which brings up context menu)\n      // 3. If there's an anchor link as a child, tap won't be triggered on link\n      const clientOffset = getEventClientOffset(e);\n      if (clientOffset) {\n        if (isTouchEvent(e)) {\n          this.lastTargetTouchFallback = e.targetTouches[0];\n        }\n        this._mouseClientOffset = clientOffset;\n      }\n      this.waitingForDelay = false;\n    };\n    this.handleTopMoveStartDelay = e => {\n      if (!eventShouldStartDrag(e)) {\n        return;\n      }\n      const delay = e.type === eventNames.touch.start ? this.options.delayTouchStart : this.options.delayMouseStart;\n      this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), delay);\n      this.waitingForDelay = true;\n    };\n    this.handleTopMoveCapture = () => {\n      this.dragOverTargetIds = [];\n    };\n    this.handleMove = (_evt, targetId) => {\n      if (this.dragOverTargetIds) {\n        this.dragOverTargetIds.unshift(targetId);\n      }\n    };\n    this.handleTopMove = e1 => {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      if (!this.document || this.waitingForDelay) {\n        return;\n      }\n      const {\n        moveStartSourceIds,\n        dragOverTargetIds\n      } = this;\n      const enableHoverOutsideTarget = this.options.enableHoverOutsideTarget;\n      const clientOffset = getEventClientOffset(e1, this.lastTargetTouchFallback);\n      if (!clientOffset) {\n        return;\n      }\n      // If the touch move started as a scroll, or is is between the scroll angles\n      if (this._isScrolling || !this.monitor.isDragging() && inAngleRanges(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y, this.options.scrollAngleRanges)) {\n        this._isScrolling = true;\n        return;\n      }\n      // If we're not dragging and we've moved a little, that counts as a drag start\n      if (!this.monitor.isDragging() &&\n      // eslint-disable-next-line no-prototype-builtins\n      this._mouseClientOffset.hasOwnProperty('x') && moveStartSourceIds && distance(this._mouseClientOffset.x || 0, this._mouseClientOffset.y || 0, clientOffset.x, clientOffset.y) > (this.options.touchSlop ? this.options.touchSlop : 0)) {\n        this.moveStartSourceIds = undefined;\n        this.actions.beginDrag(moveStartSourceIds, {\n          clientOffset: this._mouseClientOffset,\n          getSourceClientOffset: this.getSourceClientOffset,\n          publishSource: false\n        });\n      }\n      if (!this.monitor.isDragging()) {\n        return;\n      }\n      const sourceNode = this.sourceNodes.get(this.monitor.getSourceId());\n      this.installSourceNodeRemovalObserver(sourceNode);\n      this.actions.publishDragSource();\n      if (e1.cancelable) e1.preventDefault();\n      // Get the node elements of the hovered DropTargets\n      const dragOverTargetNodes = (dragOverTargetIds || []).map(key => this.targetNodes.get(key)).filter(e => !!e);\n      // Get the a ordered list of nodes that are touched by\n      const elementsAtPoint = this.options.getDropTargetElementsAtPoint ? this.options.getDropTargetElementsAtPoint(clientOffset.x, clientOffset.y, dragOverTargetNodes) : this.document.elementsFromPoint(clientOffset.x, clientOffset.y);\n      // Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)\n      const elementsAtPointExtended = [];\n      for (const nodeId in elementsAtPoint) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (!elementsAtPoint.hasOwnProperty(nodeId)) {\n          continue;\n        }\n        let currentNode = elementsAtPoint[nodeId];\n        if (currentNode != null) {\n          elementsAtPointExtended.push(currentNode);\n        }\n        while (currentNode) {\n          currentNode = currentNode.parentElement;\n          if (currentNode && elementsAtPointExtended.indexOf(currentNode) === -1) {\n            elementsAtPointExtended.push(currentNode);\n          }\n        }\n      }\n      const orderedDragOverTargetIds = elementsAtPointExtended // Filter off nodes that arent a hovered DropTargets nodes\n      .filter(node => dragOverTargetNodes.indexOf(node) > -1) // Map back the nodes elements to targetIds\n      .map(node => this._getDropTargetId(node)) // Filter off possible null rows\n      .filter(node => !!node).filter((id, index, ids) => ids.indexOf(id) === index);\n      // Invoke hover for drop targets when source node is still over and pointer is outside\n      if (enableHoverOutsideTarget) {\n        for (const targetId in this.targetNodes) {\n          const targetNode = this.targetNodes.get(targetId);\n          if (sourceNode && targetNode && targetNode.contains(sourceNode) && orderedDragOverTargetIds.indexOf(targetId) === -1) {\n            orderedDragOverTargetIds.unshift(targetId);\n            break;\n          }\n        }\n      }\n      // Reverse order because dnd-core reverse it before calling the DropTarget drop methods\n      orderedDragOverTargetIds.reverse();\n      this.actions.hover(orderedDragOverTargetIds, {\n        clientOffset: clientOffset\n      });\n    };\n    /**\n    *\n    * visible for testing\n    */\n    this._getDropTargetId = node => {\n      const keys = this.targetNodes.keys();\n      let next = keys.next();\n      while (next.done === false) {\n        const targetId = next.value;\n        if (node === this.targetNodes.get(targetId)) {\n          return targetId;\n        } else {\n          next = keys.next();\n        }\n      }\n      return undefined;\n    };\n    this.handleTopMoveEndCapture = e => {\n      this._isScrolling = false;\n      this.lastTargetTouchFallback = undefined;\n      if (!eventShouldEndDrag(e)) {\n        return;\n      }\n      if (!this.monitor.isDragging() || this.monitor.didDrop()) {\n        this.moveStartSourceIds = undefined;\n        return;\n      }\n      if (e.cancelable) e.preventDefault();\n      this._mouseClientOffset = {};\n      this.uninstallSourceNodeRemovalObserver();\n      this.actions.drop();\n      this.actions.endDrag();\n    };\n    this.handleCancelOnEscape = e => {\n      if (e.key === 'Escape' && this.monitor.isDragging()) {\n        this._mouseClientOffset = {};\n        this.uninstallSourceNodeRemovalObserver();\n        this.actions.endDrag();\n      }\n    };\n    this.options = new OptionsReader(options, context);\n    this.actions = manager.getActions();\n    this.monitor = manager.getMonitor();\n    this.sourceNodes = new Map();\n    this.sourcePreviewNodes = new Map();\n    this.sourcePreviewNodeOptions = new Map();\n    this.targetNodes = new Map();\n    this.listenerTypes = [];\n    this._mouseClientOffset = {};\n    this._isScrolling = false;\n    if (this.options.enableMouseEvents) {\n      this.listenerTypes.push(ListenerType.mouse);\n    }\n    if (this.options.enableTouchEvents) {\n      this.listenerTypes.push(ListenerType.touch);\n    }\n    if (this.options.enableKeyboardEvents) {\n      this.listenerTypes.push(ListenerType.keyboard);\n    }\n  }\n}","map":{"version":3,"names":["invariant","ListenerType","OptionsReader","distance","inAngleRanges","getEventClientOffset","getNodeClientOffset","eventShouldEndDrag","eventShouldStartDrag","isTouchEvent","supportsPassive","eventNames","mouse","start","move","end","contextmenu","touch","keyboard","keydown","TouchBackendImpl","profile","ref","sourceNodes","size","sourcePreviewNodes","sourcePreviewNodeOptions","targetNodes","dragOverTargetIds","length","document","options","setup","root","rootElement","isSetUp","addEventListener","getTopMoveStartHandler","handleTopMoveStartCapture","handleTopMove","handleTopMoveCapture","handleTopMoveEndCapture","enableMouseEvents","ignoreContextMenu","enableKeyboardEvents","handleCancelOnEscape","teardown","_mouseClientOffset","removeEventListener","handleTopMoveStart","uninstallSourceNodeRemovalObserver","subject","event","handler","capture","passive","listenerTypes","forEach","listenerType","evt","connectDragSource","sourceId","node","handleMoveStart","bind","set","delete","connectDragPreview","connectDropTarget","targetId","handleMove","e","monitor","isDragging","coords","type","x","clientX","y","clientY","ref1","touches","droppedOn","elementFromPoint","undefined","childMatch","contains","body","delayTouchStart","delayMouseStart","handleTopMoveStartDelay","installSourceNodeRemovalObserver","draggedSourceNode","draggedSourceNodeRemovalObserver","MutationObserver","parentElement","resurrectSourceNode","observe","childList","style","display","removeAttribute","appendChild","disconnect","constructor","manager","context","getSourceClientOffset","element","get","moveStartSourceIds","Array","isArray","unshift","clientOffset","lastTargetTouchFallback","targetTouches","waitingForDelay","delay","timeout","setTimeout","_evt","e1","clearTimeout","enableHoverOutsideTarget","_isScrolling","scrollAngleRanges","hasOwnProperty","touchSlop","actions","beginDrag","publishSource","sourceNode","getSourceId","publishDragSource","cancelable","preventDefault","dragOverTargetNodes","map","key","filter","elementsAtPoint","getDropTargetElementsAtPoint","elementsFromPoint","elementsAtPointExtended","nodeId","currentNode","push","indexOf","orderedDragOverTargetIds","_getDropTargetId","id","index","ids","targetNode","reverse","hover","keys","next","done","value","didDrop","drop","endDrag","getActions","getMonitor","Map","enableTouchEvents"],"sources":["C:\\Users\\oyeti\\Documents\\GitHub\\HNG_Stage-Three\\node_modules\\react-dnd-touch-backend\\src\\TouchBackendImpl.ts"],"sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type {\n\tBackend,\n\tDragDropActions,\n\tDragDropManager,\n\tDragDropMonitor,\n\tIdentifier,\n\tUnsubscribe,\n\tXYCoord,\n} from 'dnd-core'\n\nimport type {\n\tEventName,\n\tTouchBackendContext,\n\tTouchBackendOptions,\n} from './interfaces.js'\nimport { ListenerType } from './interfaces.js'\nimport { OptionsReader } from './OptionsReader.js'\nimport { distance, inAngleRanges } from './utils/math.js'\nimport { getEventClientOffset, getNodeClientOffset } from './utils/offsets.js'\nimport {\n\teventShouldEndDrag,\n\teventShouldStartDrag,\n\tisTouchEvent,\n} from './utils/predicates.js'\nimport { supportsPassive } from './utils/supportsPassive.js'\n\nconst eventNames: Record<ListenerType, EventName> = {\n\t[ListenerType.mouse]: {\n\t\tstart: 'mousedown',\n\t\tmove: 'mousemove',\n\t\tend: 'mouseup',\n\t\tcontextmenu: 'contextmenu',\n\t},\n\t[ListenerType.touch]: {\n\t\tstart: 'touchstart',\n\t\tmove: 'touchmove',\n\t\tend: 'touchend',\n\t},\n\t[ListenerType.keyboard]: {\n\t\tkeydown: 'keydown',\n\t},\n}\n\nexport class TouchBackendImpl implements Backend {\n\tprivate options: OptionsReader\n\n\t// React-DnD Dependencies\n\tprivate actions: DragDropActions\n\tprivate monitor: DragDropMonitor\n\n\t// Internal State\n\tprivate static isSetUp: boolean\n\tpublic sourceNodes: Map<Identifier, HTMLElement>\n\tpublic sourcePreviewNodes: Map<string, HTMLElement>\n\tpublic sourcePreviewNodeOptions: Map<string, any>\n\tpublic targetNodes: Map<string, HTMLElement>\n\tprivate _mouseClientOffset: Partial<XYCoord>\n\tprivate _isScrolling: boolean\n\tprivate listenerTypes: ListenerType[]\n\tprivate moveStartSourceIds: string[] | undefined\n\tprivate waitingForDelay: boolean | undefined\n\tprivate timeout: ReturnType<typeof setTimeout> | undefined\n\tprivate dragOverTargetIds: string[] | undefined\n\tprivate draggedSourceNode: HTMLElement | undefined\n\tprivate draggedSourceNodeRemovalObserver: MutationObserver | undefined\n\n\t// Patch for iOS 13, discussion over #1585\n\tprivate lastTargetTouchFallback: Touch | undefined\n\n\tpublic constructor(\n\t\tmanager: DragDropManager,\n\t\tcontext: TouchBackendContext,\n\t\toptions: Partial<TouchBackendOptions>,\n\t) {\n\t\tthis.options = new OptionsReader(options, context)\n\t\tthis.actions = manager.getActions()\n\t\tthis.monitor = manager.getMonitor()\n\n\t\tthis.sourceNodes = new Map()\n\t\tthis.sourcePreviewNodes = new Map()\n\t\tthis.sourcePreviewNodeOptions = new Map()\n\t\tthis.targetNodes = new Map()\n\t\tthis.listenerTypes = []\n\t\tthis._mouseClientOffset = {}\n\t\tthis._isScrolling = false\n\n\t\tif (this.options.enableMouseEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.mouse)\n\t\t}\n\n\t\tif (this.options.enableTouchEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.touch)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.listenerTypes.push(ListenerType.keyboard)\n\t\t}\n\t}\n\n\t/**\n\t * Generate profiling statistics for the HTML5Backend.\n\t */\n\tpublic profile(): Record<string, number> {\n\t\treturn {\n\t\t\tsourceNodes: this.sourceNodes.size,\n\t\t\tsourcePreviewNodes: this.sourcePreviewNodes.size,\n\t\t\tsourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,\n\t\t\ttargetNodes: this.targetNodes.size,\n\t\t\tdragOverTargetIds: this.dragOverTargetIds?.length || 0,\n\t\t}\n\t}\n\n\t// public for test\n\tpublic get document(): Document | undefined {\n\t\treturn this.options.document\n\t}\n\n\tpublic setup(): void {\n\t\tconst root = this.options.rootElement\n\t\tif (!root) {\n\t\t\treturn\n\t\t}\n\n\t\tinvariant(\n\t\t\t!TouchBackendImpl.isSetUp,\n\t\t\t'Cannot have two Touch backends at the same time.',\n\t\t)\n\t\tTouchBackendImpl.isSetUp = true\n\n\t\tthis.addEventListener(root, 'start', this.getTopMoveStartHandler() as any)\n\t\tthis.addEventListener(\n\t\t\troot,\n\t\t\t'start',\n\t\t\tthis.handleTopMoveStartCapture as any,\n\t\t\ttrue,\n\t\t)\n\t\tthis.addEventListener(root, 'move', this.handleTopMove as any)\n\t\tthis.addEventListener(root, 'move', this.handleTopMoveCapture, true)\n\t\tthis.addEventListener(\n\t\t\troot,\n\t\t\t'end',\n\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\ttrue,\n\t\t)\n\n\t\tif (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n\t\t\tthis.addEventListener(\n\t\t\t\troot,\n\t\t\t\t'contextmenu',\n\t\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\t)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.addEventListener(\n\t\t\t\troot,\n\t\t\t\t'keydown',\n\t\t\t\tthis.handleCancelOnEscape as any,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\t}\n\n\tpublic teardown(): void {\n\t\tconst root = this.options.rootElement\n\t\tif (!root) {\n\t\t\treturn\n\t\t}\n\n\t\tTouchBackendImpl.isSetUp = false\n\t\tthis._mouseClientOffset = {}\n\n\t\tthis.removeEventListener(\n\t\t\troot,\n\t\t\t'start',\n\t\t\tthis.handleTopMoveStartCapture as any,\n\t\t\ttrue,\n\t\t)\n\t\tthis.removeEventListener(root, 'start', this.handleTopMoveStart as any)\n\t\tthis.removeEventListener(root, 'move', this.handleTopMoveCapture, true)\n\t\tthis.removeEventListener(root, 'move', this.handleTopMove as any)\n\t\tthis.removeEventListener(\n\t\t\troot,\n\t\t\t'end',\n\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\ttrue,\n\t\t)\n\n\t\tif (this.options.enableMouseEvents && !this.options.ignoreContextMenu) {\n\t\t\tthis.removeEventListener(\n\t\t\t\troot,\n\t\t\t\t'contextmenu',\n\t\t\t\tthis.handleTopMoveEndCapture as any,\n\t\t\t)\n\t\t}\n\n\t\tif (this.options.enableKeyboardEvents) {\n\t\t\tthis.removeEventListener(\n\t\t\t\troot,\n\t\t\t\t'keydown',\n\t\t\t\tthis.handleCancelOnEscape as any,\n\t\t\t\ttrue,\n\t\t\t)\n\t\t}\n\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\t}\n\n\tprivate addEventListener<K extends keyof EventName>(\n\t\tsubject: Node,\n\t\tevent: K,\n\t\thandler: (e: any) => void,\n\t\tcapture = false,\n\t) {\n\t\tconst options = supportsPassive ? { capture, passive: false } : capture\n\n\t\tthis.listenerTypes.forEach(function (listenerType) {\n\t\t\tconst evt = eventNames[listenerType][event]\n\n\t\t\tif (evt) {\n\t\t\t\tsubject.addEventListener(evt as any, handler as any, options)\n\t\t\t}\n\t\t})\n\t}\n\n\tprivate removeEventListener<K extends keyof EventName>(\n\t\tsubject: Node,\n\t\tevent: K,\n\t\thandler: (e: any) => void,\n\t\tcapture = false,\n\t) {\n\t\tconst options = supportsPassive ? { capture, passive: false } : capture\n\n\t\tthis.listenerTypes.forEach(function (listenerType) {\n\t\t\tconst evt = eventNames[listenerType][event]\n\n\t\t\tif (evt) {\n\t\t\t\tsubject.removeEventListener(evt as any, handler as any, options)\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic connectDragSource(sourceId: string, node: HTMLElement): Unsubscribe {\n\t\tconst handleMoveStart = this.handleMoveStart.bind(this, sourceId)\n\t\tthis.sourceNodes.set(sourceId, node)\n\n\t\tthis.addEventListener(node, 'start', handleMoveStart)\n\n\t\treturn (): void => {\n\t\t\tthis.sourceNodes.delete(sourceId)\n\t\t\tthis.removeEventListener(node, 'start', handleMoveStart)\n\t\t}\n\t}\n\n\tpublic connectDragPreview(\n\t\tsourceId: string,\n\t\tnode: HTMLElement,\n\t\toptions: unknown,\n\t): Unsubscribe {\n\t\tthis.sourcePreviewNodeOptions.set(sourceId, options)\n\t\tthis.sourcePreviewNodes.set(sourceId, node)\n\n\t\treturn (): void => {\n\t\t\tthis.sourcePreviewNodes.delete(sourceId)\n\t\t\tthis.sourcePreviewNodeOptions.delete(sourceId)\n\t\t}\n\t}\n\n\tpublic connectDropTarget(targetId: string, node: HTMLElement): Unsubscribe {\n\t\tconst root = this.options.rootElement\n\t\tif (!this.document || !root) {\n\t\t\treturn (): void => {\n\t\t\t\t/* noop */\n\t\t\t}\n\t\t}\n\n\t\tconst handleMove = (e: MouseEvent | TouchEvent) => {\n\t\t\tif (!this.document || !root || !this.monitor.isDragging()) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tlet coords\n\n\t\t\t/**\n\t\t\t * Grab the coordinates for the current mouse/touch position\n\t\t\t */\n\t\t\tswitch (e.type) {\n\t\t\t\tcase eventNames.mouse.move:\n\t\t\t\t\tcoords = {\n\t\t\t\t\t\tx: (e as MouseEvent).clientX,\n\t\t\t\t\t\ty: (e as MouseEvent).clientY,\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\n\t\t\t\tcase eventNames.touch.move:\n\t\t\t\t\tcoords = {\n\t\t\t\t\t\tx: (e as TouchEvent).touches[0]?.clientX || 0,\n\t\t\t\t\t\ty: (e as TouchEvent).touches[0]?.clientY || 0,\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Use the coordinates to grab the element the drag ended on.\n\t\t\t * If the element is the same as the target node (or any of it's children) then we have hit a drop target and can handle the move.\n\t\t\t */\n\t\t\tconst droppedOn =\n\t\t\t\tcoords != null\n\t\t\t\t\t? this.document.elementFromPoint(coords.x, coords.y)\n\t\t\t\t\t: undefined\n\t\t\tconst childMatch = droppedOn && node.contains(droppedOn)\n\n\t\t\tif (droppedOn === node || childMatch) {\n\t\t\t\treturn this.handleMove(e, targetId)\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Attaching the event listener to the body so that touchmove will work while dragging over multiple target elements.\n\t\t */\n\t\tthis.addEventListener(this.document.body, 'move', handleMove as any)\n\t\tthis.targetNodes.set(targetId, node)\n\n\t\treturn (): void => {\n\t\t\tif (this.document) {\n\t\t\t\tthis.targetNodes.delete(targetId)\n\t\t\t\tthis.removeEventListener(this.document.body, 'move', handleMove as any)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getSourceClientOffset = (sourceId: string): XYCoord | undefined => {\n\t\tconst element = this.sourceNodes.get(sourceId)\n\t\treturn element && getNodeClientOffset(element)\n\t}\n\n\tpublic handleTopMoveStartCapture = (e: Event): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.moveStartSourceIds = []\n\t}\n\n\tpublic handleMoveStart = (sourceId: string): void => {\n\t\t// Just because we received an event doesn't necessarily mean we need to collect drag sources.\n\t\t// We only collect start collecting drag sources on touch and left mouse events.\n\t\tif (Array.isArray(this.moveStartSourceIds)) {\n\t\t\tthis.moveStartSourceIds.unshift(sourceId)\n\t\t}\n\t}\n\n\tprivate getTopMoveStartHandler() {\n\t\tif (!this.options.delayTouchStart && !this.options.delayMouseStart) {\n\t\t\treturn this.handleTopMoveStart\n\t\t}\n\n\t\treturn this.handleTopMoveStartDelay\n\t}\n\n\tpublic handleTopMoveStart = (e: MouseEvent | TouchEvent): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\t// Don't prematurely preventDefault() here since it might:\n\t\t// 1. Mess up scrolling\n\t\t// 2. Mess up long tap (which brings up context menu)\n\t\t// 3. If there's an anchor link as a child, tap won't be triggered on link\n\n\t\tconst clientOffset = getEventClientOffset(e)\n\t\tif (clientOffset) {\n\t\t\tif (isTouchEvent(e)) {\n\t\t\t\tthis.lastTargetTouchFallback = e.targetTouches[0]\n\t\t\t}\n\t\t\tthis._mouseClientOffset = clientOffset\n\t\t}\n\t\tthis.waitingForDelay = false\n\t}\n\n\tpublic handleTopMoveStartDelay = (e: Event): void => {\n\t\tif (!eventShouldStartDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tconst delay =\n\t\t\te.type === eventNames.touch.start\n\t\t\t\t? this.options.delayTouchStart\n\t\t\t\t: this.options.delayMouseStart\n\t\tthis.timeout = setTimeout(\n\t\t\tthis.handleTopMoveStart.bind(this, e as any),\n\t\t\tdelay,\n\t\t) as any as ReturnType<typeof setTimeout>\n\t\tthis.waitingForDelay = true\n\t}\n\n\tpublic handleTopMoveCapture = (): void => {\n\t\tthis.dragOverTargetIds = []\n\t}\n\n\tpublic handleMove = (\n\t\t_evt: MouseEvent | TouchEvent,\n\t\ttargetId: string,\n\t): void => {\n\t\tif (this.dragOverTargetIds) {\n\t\t\tthis.dragOverTargetIds.unshift(targetId)\n\t\t}\n\t}\n\n\tpublic handleTopMove = (e: TouchEvent | MouseEvent): void => {\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout)\n\t\t}\n\t\tif (!this.document || this.waitingForDelay) {\n\t\t\treturn\n\t\t}\n\t\tconst { moveStartSourceIds, dragOverTargetIds } = this\n\t\tconst enableHoverOutsideTarget = this.options.enableHoverOutsideTarget\n\n\t\tconst clientOffset = getEventClientOffset(e, this.lastTargetTouchFallback)\n\n\t\tif (!clientOffset) {\n\t\t\treturn\n\t\t}\n\n\t\t// If the touch move started as a scroll, or is is between the scroll angles\n\t\tif (\n\t\t\tthis._isScrolling ||\n\t\t\t(!this.monitor.isDragging() &&\n\t\t\t\tinAngleRanges(\n\t\t\t\t\tthis._mouseClientOffset.x || 0,\n\t\t\t\t\tthis._mouseClientOffset.y || 0,\n\t\t\t\t\tclientOffset.x,\n\t\t\t\t\tclientOffset.y,\n\t\t\t\t\tthis.options.scrollAngleRanges,\n\t\t\t\t))\n\t\t) {\n\t\t\tthis._isScrolling = true\n\t\t\treturn\n\t\t}\n\n\t\t// If we're not dragging and we've moved a little, that counts as a drag start\n\t\tif (\n\t\t\t!this.monitor.isDragging() &&\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tthis._mouseClientOffset.hasOwnProperty('x') &&\n\t\t\tmoveStartSourceIds &&\n\t\t\tdistance(\n\t\t\t\tthis._mouseClientOffset.x || 0,\n\t\t\t\tthis._mouseClientOffset.y || 0,\n\t\t\t\tclientOffset.x,\n\t\t\t\tclientOffset.y,\n\t\t\t) > (this.options.touchSlop ? this.options.touchSlop : 0)\n\t\t) {\n\t\t\tthis.moveStartSourceIds = undefined\n\n\t\t\tthis.actions.beginDrag(moveStartSourceIds, {\n\t\t\t\tclientOffset: this._mouseClientOffset,\n\t\t\t\tgetSourceClientOffset: this.getSourceClientOffset,\n\t\t\t\tpublishSource: false,\n\t\t\t})\n\t\t}\n\n\t\tif (!this.monitor.isDragging()) {\n\t\t\treturn\n\t\t}\n\n\t\tconst sourceNode = this.sourceNodes.get(\n\t\t\tthis.monitor.getSourceId() as string,\n\t\t)\n\t\tthis.installSourceNodeRemovalObserver(sourceNode)\n\t\tthis.actions.publishDragSource()\n\n\t\tif (e.cancelable) e.preventDefault()\n\n\t\t// Get the node elements of the hovered DropTargets\n\t\tconst dragOverTargetNodes: HTMLElement[] = (dragOverTargetIds || [])\n\t\t\t.map((key) => this.targetNodes.get(key))\n\t\t\t.filter((e) => !!e) as HTMLElement[]\n\n\t\t// Get the a ordered list of nodes that are touched by\n\t\tconst elementsAtPoint = this.options.getDropTargetElementsAtPoint\n\t\t\t? this.options.getDropTargetElementsAtPoint(\n\t\t\t\t\tclientOffset.x,\n\t\t\t\t\tclientOffset.y,\n\t\t\t\t\tdragOverTargetNodes,\n\t\t\t  )\n\t\t\t: this.document.elementsFromPoint(clientOffset.x, clientOffset.y)\n\t\t// Extend list with parents that are not receiving elementsFromPoint events (size 0 elements and svg groups)\n\t\tconst elementsAtPointExtended: Element[] = []\n\t\tfor (const nodeId in elementsAtPoint) {\n\t\t\t// eslint-disable-next-line no-prototype-builtins\n\t\t\tif (!elementsAtPoint.hasOwnProperty(nodeId)) {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tlet currentNode: Element | undefined | null = elementsAtPoint[nodeId]\n\t\t\tif (currentNode != null) {\n\t\t\t\telementsAtPointExtended.push(currentNode)\n\t\t\t}\n\t\t\twhile (currentNode) {\n\t\t\t\tcurrentNode = currentNode.parentElement\n\t\t\t\tif (\n\t\t\t\t\tcurrentNode &&\n\t\t\t\t\telementsAtPointExtended.indexOf(currentNode) === -1\n\t\t\t\t) {\n\t\t\t\t\telementsAtPointExtended.push(currentNode)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst orderedDragOverTargetIds: string[] = elementsAtPointExtended\n\t\t\t// Filter off nodes that arent a hovered DropTargets nodes\n\t\t\t.filter((node) => dragOverTargetNodes.indexOf(node as HTMLElement) > -1)\n\t\t\t// Map back the nodes elements to targetIds\n\t\t\t.map((node) => this._getDropTargetId(node))\n\t\t\t// Filter off possible null rows\n\t\t\t.filter((node) => !!node)\n\t\t\t.filter((id, index, ids) => ids.indexOf(id) === index) as string[]\n\n\t\t// Invoke hover for drop targets when source node is still over and pointer is outside\n\t\tif (enableHoverOutsideTarget) {\n\t\t\tfor (const targetId in this.targetNodes) {\n\t\t\t\tconst targetNode = this.targetNodes.get(targetId)\n\t\t\t\tif (\n\t\t\t\t\tsourceNode &&\n\t\t\t\t\ttargetNode &&\n\t\t\t\t\ttargetNode.contains(sourceNode) &&\n\t\t\t\t\torderedDragOverTargetIds.indexOf(targetId) === -1\n\t\t\t\t) {\n\t\t\t\t\torderedDragOverTargetIds.unshift(targetId)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reverse order because dnd-core reverse it before calling the DropTarget drop methods\n\t\torderedDragOverTargetIds.reverse()\n\n\t\tthis.actions.hover(orderedDragOverTargetIds, {\n\t\t\tclientOffset: clientOffset,\n\t\t})\n\t}\n\n\t/**\n\t *\n\t * visible for testing\n\t */\n\tpublic _getDropTargetId = (node: Element): Identifier | undefined => {\n\t\tconst keys = this.targetNodes.keys()\n\t\tlet next = keys.next()\n\t\twhile (next.done === false) {\n\t\t\tconst targetId = next.value\n\t\t\tif (node === this.targetNodes.get(targetId)) {\n\t\t\t\treturn targetId\n\t\t\t} else {\n\t\t\t\tnext = keys.next()\n\t\t\t}\n\t\t}\n\t\treturn undefined\n\t}\n\n\tpublic handleTopMoveEndCapture = (e: Event): void => {\n\t\tthis._isScrolling = false\n\t\tthis.lastTargetTouchFallback = undefined\n\n\t\tif (!eventShouldEndDrag(e as MouseEvent)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (!this.monitor.isDragging() || this.monitor.didDrop()) {\n\t\t\tthis.moveStartSourceIds = undefined\n\t\t\treturn\n\t\t}\n\n\t\tif (e.cancelable) e.preventDefault()\n\n\t\tthis._mouseClientOffset = {}\n\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\tthis.actions.drop()\n\t\tthis.actions.endDrag()\n\t}\n\n\tpublic handleCancelOnEscape = (e: KeyboardEvent): void => {\n\t\tif (e.key === 'Escape' && this.monitor.isDragging()) {\n\t\t\tthis._mouseClientOffset = {}\n\n\t\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\t\tthis.actions.endDrag()\n\t\t}\n\t}\n\n\tprivate installSourceNodeRemovalObserver(node: HTMLElement | undefined) {\n\t\tthis.uninstallSourceNodeRemovalObserver()\n\n\t\tthis.draggedSourceNode = node\n\t\tthis.draggedSourceNodeRemovalObserver = new MutationObserver(() => {\n\t\t\tif (node && !node.parentElement) {\n\t\t\t\tthis.resurrectSourceNode()\n\t\t\t\tthis.uninstallSourceNodeRemovalObserver()\n\t\t\t}\n\t\t})\n\n\t\tif (!node || !node.parentElement) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.draggedSourceNodeRemovalObserver.observe(node.parentElement, {\n\t\t\tchildList: true,\n\t\t})\n\t}\n\n\tprivate resurrectSourceNode() {\n\t\tif (this.document && this.draggedSourceNode) {\n\t\t\tthis.draggedSourceNode.style.display = 'none'\n\t\t\tthis.draggedSourceNode.removeAttribute('data-reactid')\n\t\t\tthis.document.body.appendChild(this.draggedSourceNode)\n\t\t}\n\t}\n\n\tprivate uninstallSourceNodeRemovalObserver() {\n\t\tif (this.draggedSourceNodeRemovalObserver) {\n\t\t\tthis.draggedSourceNodeRemovalObserver.disconnect()\n\t\t}\n\n\t\tthis.draggedSourceNodeRemovalObserver = undefined\n\t\tthis.draggedSourceNode = undefined\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}