{"ast":null,"code":"// Used for MouseEvent.buttons (note the s on the end).\nvar MouseButtons = {\n  Left: 1,\n  Right: 2,\n  Center: 4\n};\n// Used for e.button (note the lack of an s on the end).\nvar MouseButton = {\n  Left: 0,\n  Center: 1,\n  Right: 2\n};\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldStartDrag(e) {\n  // For touch events, button will be undefined. If e.button is defined,\n  // then it should be MouseButton.Left.\n  return e.button === undefined || e.button === MouseButton.Left;\n}\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldEndDrag(e) {\n  // Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n  // bit field unset if the left mouse button has been released\n  return e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0;\n}\nexport function isTouchEvent(e) {\n  return !!e.targetTouches;\n}","map":{"version":3,"names":["MouseButtons","Left","Right","Center","MouseButton","eventShouldStartDrag","e","button","undefined","eventShouldEndDrag","buttons","isTouchEvent","targetTouches"],"sources":["C:\\Users\\oyeti\\Documents\\GitHub\\HNG_Stage-Three\\node_modules\\react-dnd-touch-backend\\src\\utils\\predicates.ts"],"sourcesContent":["// Used for MouseEvent.buttons (note the s on the end).\nconst MouseButtons = {\n\tLeft: 1,\n\tRight: 2,\n\tCenter: 4,\n}\n\n// Used for e.button (note the lack of an s on the end).\nconst MouseButton = {\n\tLeft: 0,\n\tCenter: 1,\n\tRight: 2,\n}\n\n/**\n * Only touch events and mouse events where the left button is pressed should initiate a drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldStartDrag(e: MouseEvent): boolean {\n\t// For touch events, button will be undefined. If e.button is defined,\n\t// then it should be MouseButton.Left.\n\treturn e.button === undefined || e.button === MouseButton.Left\n}\n\n/**\n * Only touch events and mouse events where the left mouse button is no longer held should end a drag.\n * It's possible the user mouse downs with the left mouse button, then mouse down and ups with the right mouse button.\n * We don't want releasing the right mouse button to end the drag.\n * @param {MouseEvent | TouchEvent} e The event\n */\nexport function eventShouldEndDrag(e: MouseEvent): boolean {\n\t// Touch events will have buttons be undefined, while mouse events will have e.buttons's left button\n\t// bit field unset if the left mouse button has been released\n\treturn e.buttons === undefined || (e.buttons & MouseButtons.Left) === 0\n}\n\nexport function isTouchEvent(\n\te: Touch | TouchEvent | MouseEvent,\n): e is TouchEvent {\n\treturn !!(e as TouchEvent).targetTouches\n}\n"],"mappings":"AAAA;AACA,IAAMA,YAAY,GAAG;EACpBC,IAAI,EAAE,CAAC;EACPC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE;CACR;AAED;AACA,IAAMC,WAAW,GAAG;EACnBH,IAAI,EAAE,CAAC;EACPE,MAAM,EAAE,CAAC;EACTD,KAAK,EAAE;CACP;AAED;;;;AAIA,OAAO,SAASG,oBAAoBA,CAACC,CAAa,EAAW;EAC5D;EACA;EACA,OAAOA,CAAC,CAACC,MAAM,KAAKC,SAAS,IAAIF,CAAC,CAACC,MAAM,KAAKH,WAAW,CAACH,IAAI;;AAG/D;;;;;;AAMA,OAAO,SAASQ,kBAAkBA,CAACH,CAAa,EAAW;EAC1D;EACA;EACA,OAAOA,CAAC,CAACI,OAAO,KAAKF,SAAS,IAAI,CAACF,CAAC,CAACI,OAAO,GAAGV,YAAY,CAACC,IAAI,MAAM,CAAC;;AAGxE,OAAO,SAASU,YAAYA,CAC3BL,CAAkC,EAChB;EAClB,OAAO,CAAC,CAACA,CAAE,CAAgBM,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}